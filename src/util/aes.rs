use aes::{cipher::{generic_array::GenericArray, KeyInit}, Aes128Dec};
use cipher::{BlockDecryptMut, block_padding::Pkcs7};

pub const CORE_KEY: &[u8;16] = &[0x68, 0x7A, 0x48, 0x52, 0x41, 0x6D, 0x73, 0x6F, 0x35, 0x6B, 0x49, 0x6E, 0x62, 0x61, 0x78, 0x57];
pub const MATA_KEY: &[u8;16] = &[0x23, 0x31, 0x34, 0x6C, 0x6A, 0x6B, 0x5F, 0x21, 0x5C, 0x5D, 0x26, 0x30, 0x55, 0x3C, 0x27, 0x28];

pub fn decrypt_aes(str: &[u8], key: &[u8;16]) -> Vec<u8> {
    let array = GenericArray::from(key.clone());
    let cipher = Aes128Dec::new(&array);
    cipher.decrypt_padded_vec_mut::<Pkcs7>(&str).unwrap()

}


#[test]
fn test(){
    
    let code = [0x0E,0x0C,0xC5,0x3A,0x68,0x0B,0x14,0x2E,  0xA1,  0xB8,0x59, 0xE2, 0xAA, 0xBB,0x02,0x69];

    let result = String::from_utf8(decrypt_aes(&code, CORE_KEY)).expect("string_handle_event");
    assert_eq!("a",result);
}


